{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "db690776",
   "metadata": {
    "cell_marker": "\"\"\"",
    "lines_to_next_cell": 0
   },
   "source": [
    "# Deep GP samples\n",
    "\n",
    "TODO: Some explanation..."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "504dc954",
   "metadata": {},
   "outputs": [],
   "source": [
    "import gpflow\n",
    "from gpflux.helpers import construct_basic_kernel, construct_basic_inducing_variables\n",
    "from gpflux.layers import GPLayer\n",
    "import numpy as np\n",
    "import tensorflow as tf\n",
    "from gpflux.experiment_support.plotting import plot_layers\n",
    "\n",
    "tf.random.set_seed(42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0b90f360",
   "metadata": {},
   "outputs": [],
   "source": [
    "Ns = 1000\n",
    "D = 1\n",
    "a, b = 0, 1\n",
    "X = np.linspace(a, b, 1000).reshape(-1, 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9660fb31",
   "metadata": {},
   "outputs": [],
   "source": [
    "Z = X.copy()\n",
    "M = Z.shape[0]\n",
    "\n",
    "# Layer 1\n",
    "inducing_var1 = construct_basic_inducing_variables(M, D, D, share_variables=True, z_init=Z.copy())\n",
    "kernel1 = construct_basic_kernel(\n",
    "    gpflow.kernels.SquaredExponential(lengthscales=0.15),\n",
    "    output_dim=D,\n",
    "    share_hyperparams=True,\n",
    ")\n",
    "layer1 = GPLayer(kernel1, inducing_var1, Ns)\n",
    "\n",
    "# Layer 2\n",
    "inducing_var2 = construct_basic_inducing_variables(M, D, D, share_variables=True, z_init=Z.copy())\n",
    "kernel2 = construct_basic_kernel(\n",
    "    gpflow.kernels.SquaredExponential(lengthscales=0.8, variance=0.1),\n",
    "    output_dim=D,\n",
    "    share_hyperparams=True,\n",
    ")\n",
    "layer2 = GPLayer(kernel2, inducing_var2, Ns)\n",
    "\n",
    "# Layer 3\n",
    "inducing_var3 = construct_basic_inducing_variables(M, D, D, share_variables=True, z_init=Z.copy())\n",
    "kernel3 = construct_basic_kernel(\n",
    "    gpflow.kernels.SquaredExponential(lengthscales=0.3, variance=0.1),\n",
    "    output_dim=D,\n",
    "    share_hyperparams=True,\n",
    ")\n",
    "layer3 = GPLayer(kernel3, inducing_var3, Ns)\n",
    "\n",
    "gp_layers = [layer1, layer2, layer3]\n",
    "for layer in gp_layers:\n",
    "    layer.build([None, D])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8275eb2a",
   "metadata": {},
   "outputs": [],
   "source": [
    "# model = gpflux.DeepGP(np.empty((1, 1)), np.empty((1, 1)), [layer1, layer2, layer3])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a0549938",
   "metadata": {},
   "outputs": [],
   "source": [
    "plot_layers(X, gp_layers)"
   ]
  }
 ],
 "metadata": {
  "jupytext": {
   "formats": "ipynb,py:percent"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
