:mod:`gpflux.layers.basis_functions`
====================================

.. py:module:: gpflux.layers.basis_functions

.. autoapi-nested-parse::

   A kernel's features for efficient sampling, used by
   :class:`gpflux.sampling.KernelWithFeatureDecomposition`



Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   random_fourier_features/index.rst


Package Contents
----------------

.. class:: RandomFourierFeatures(kernel: gpflow.kernels.Kernel, output_dim: int, **kwargs: Mapping)


   Bases: :class:`tensorflow.keras.layers.Layer`

   Random Fourier Features (RFF) is a method for approximating kernels. The essential
   element of the RFF approach :cite:p:`rahimi2007random` is the realization that Bochner's theorem
   for stationary kernels can be approximated by a Monte Carlo sum.

   We will approximate the kernel :math:`k(x, x')` by :math:`\Phi(x)^\top \Phi(x')`
   where :math:`Phi: x \to \mathbb{R}` is a finite-dimensional feature map.
   Each feature is defined as:

   .. math:: \Phi(x) = \sqrt{2 \sigma^2 / \ell) \cos(\theta^\top x + \tau)

   where :math:`\sigma^2` is the kernel variance.

   The features are parameterised by random weights:
   * :math:`\theta`, sampled proportional to the kernel's spectral density
   * :math:`\tau \sim \mathcal{U}(0, 2\pi)`

   :param kernel: kernel to approximate using a set of random features.
   :param output_dim: total number of basis functions used to approximate
       the kernel.

   .. method:: build(self, input_shape: gpflux.types.ShapeType) -> None

      Creates the variables of the layer.
      See `tf.keras.layers.Layer.build()
      <https://www.tensorflow.org/api_docs/python/tf/keras/layers/Layer#build>`_.


   .. method:: call(self, inputs: gpflow.base.TensorType) -> tensorflow.Tensor

      Evaluate the basis functions at ``inputs``.

      :param inputs: The evaluation points, a tensor with the shape ``[N, D]``.

      :return: A tensor with the shape ``[N, M]``.


   .. method:: compute_output_shape(self, input_shape: gpflux.types.ShapeType) -> tensorflow.TensorShape

      Computes the output shape of the layer.
      See `tf.keras.layers.Layer.compute_output_shape()
      <https://www.tensorflow.org/api_docs/python/tf/keras/layers/Layer#compute_output_shape>`_.


   .. method:: get_config(self) -> Mapping

      Returns the config of the layer.
      See `tf.keras.layers.Layer.get_config()
      <https://www.tensorflow.org/api_docs/python/tf/keras/layers/Layer#get_config>`_.



