:mod:`gpflux.optimization.keras_natgrad`
========================================

.. py:module:: gpflux.optimization.keras_natgrad

.. autoapi-nested-parse::

   Support for the `gpflow.optimizers.NaturalGradient` optimizer within Keras models.



Module Contents
---------------

.. class:: NatGradModel(*args, **kwargs)


   Bases: :class:`tensorflow.keras.Model`

   This is a drop-in replacement for `tf.keras.Model` when constructing GPflux
   models using the functional Keras style, to make it work with the
   NaturalGradient optimizers for q(u) distributions in GP layers.

   This model's :meth:`compile` method has to be passed a list of optimizers, which
   must be one `gpflow.optimizers.NaturalGradient` instance per
   :class:`~gpflux.layers.GPLayer`, followed by a regular optimizer (e.g.
   `tf.keras.optimizers.Adam`) as the last element to handle all other
   parameters (hyperparameters, inducing point locations).

   .. method:: optimizer(self) -> tensorflow.optimizers.Optimizer
      :property:

      HACK to cope with Keras's callbacks such as
      :class:`~tf.keras.callbacks.ReduceLROnPlateau`
      and
      :class:`~tf.keras.callbacks.LearningRateScheduler`
      having been hardcoded for a single optimizer.


   .. method:: train_step(self, data: Any) -> Mapping[(str, Any)]

      The logic for one training step. For more details of the
      implementation, see TensorFlow's documentation of how to
      `customize what happens in Model.fit
      <https://www.tensorflow.org/guide/keras/customizing_what_happens_in_fit>`_.



.. class:: NatGradWrapper(base_model: tensorflow.keras.Model, *args: Any, **kwargs: Any)


   Bases: :class:`gpflux.optimization.keras_natgrad.NatGradModel`

   Wraps a class-based Keras model (e.g. the return value of
   `gpflux.models.DeepGP.as_training_model`) to make it work with
   `gpflow.optimizers.NaturalGradient` optimizers. For more details, see
   `NatGradModel`.

   (Note that you can also directly pass `NatGradModel` to the
   :class:`~gpflux.models.DeepGP`'s
   :attr:`~gpflux.models.DeepGP.default_model_class` or
   :meth:`~gpflux.models.DeepGP.as_training_model`'s *model_class* arguments.)

   .. todo::

       This class will probably be removed in the future.

   :param base_model: the class-based Keras model to be wrapped

   .. method:: call(self, data: Any, training: Optional[bool] = None) -> Union[(tf.Tensor, MeanAndVariance)]

      Calls the model on new inputs. Simply passes through to the ``base_model``.



